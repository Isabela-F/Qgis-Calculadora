  # -*- coding: utf-8 -*-
"""
/***************************************************************************
 caluladoraDialog
                                 A QGIS plugin
 este plungin converte coordenadas de DMS a DD y viseversa
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-22
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Isabel Fuentes
        email                : isabelfuentes@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'calculadora_dialog_base.ui'))


class caluladoraDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(caluladoraDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

       #Disparador para Lat
       self.spbLatd.valueChanged.connect.(self.Latdmstodd)
       self.spbLatm.valueChanged.connect.(self.Latdmstodd)
       self.spbLats.valueChanged.connect.(self.Latdmstodd)
       self.cmbLat.currentTextChanged.connect(self.Latdmstodd)

       self.spbLatdd.editingFinished.connet(self.Latdmstodd)

    def Latdmstodd(self):
        iLatd = self.spbLatd.value()
        iLatm = self.spbLatm.value()
        iLats = self.spbLats.value()
        
        Laty = self.cmbLat.currentText()

        dd = float(iLatd) + iLatm/60 + iLats/3600
        
        if Laty == 'S':
           dd = dd* -1
        self.spbLatdd.setValue(dd)


     self.spbLatdd.editingFinished.connet(self.Latddtodms)


     def Latddtodms(self):
         dd = self.spbLatdd.value()
  

        iLatd = int(dd)
        iLatm = (dd- iLatd) * 60
        decm = (dd - iLatm) * 60
        iLats = (decm - iLatm) * 60

        
        self.spbLatd.setValue(abs(iLatd))
        self.spbLatm.setValue(abs(iLatm))
        self.spbLats.setValue(abs(iLats))

        
        
        self.spbLatd.setValue(abs(iLatd))

       if dd < 0:
           self.cmbLat.setcurrentText('S')
       else:
           self.cmbLat.setcurrentText('N')


       #Disparador para Lon
       self.spbLond.valueChanged.connect.(self.Londmstodd)
       self.spbLonm.valueChanged.connect.(self.Londmstodd)
       self.spbLons.valueChanged.connect.(self.Londmstodd)
       self.cmbLon.currentTextChanged.connect(self.Londmstodd)

       self.spbLondd.editingFinished.connet(self.Londmstodd)

    def Londmstodd(self):
        iLond = self.spbLond.value()
        iLonm = self.spbLonm.value()
        iLons = self.spbLons.value()
        
        Laty = self.cmbLat.currentText()

        dd = float(iLond) + iLonm/60 + iLons/3600
        
        if Lonx == 'E':
           dd = dd* -1
        self.spbLondd.setValue(dd)


     self.spbLondd.editingFinished.connet(self.Londdtodms)


     def Londdtodms(self):
         dd = self.spbLondd.value()
  

        iLond = int(dd)
        iLonm = (dd- iLond) * 60
        decm = (dd - iLonm) * 60
        iLons = (decm - iLonm) * 60

        
        self.spbLond.setValue(abs(iLond))
        self.spbLonm.setValue(abs(iLonm))
        self.spbLons.setValue(abs(iLons))

       if dd < 0:
           self.cmbLon.setcurrentText('W')
       else:
           self.cmbLon.setcurrentText('E')
 


